Data Analysis Exercises until tea break
=======================
These exercises range from dead simple to rather complex. 
You may need to read up on the meanings of some statistical terms such as correlation, variance and covariance
Each has code examples to get you going
(often they include a complete solution, but the idea is for you to experiment)

Begin a new Jupyter notebook (or a new Python module if you prefer) and write your code there
Remember to save with a new name such as 'Review4'

Compute the mean, standard deviation and variance of a given array
x = np.arange(6) # make an array
np.mean(x) # compare with np.average(x)
np.std(x)
r1= np.var(x)

Expected Results:
Original array x: [0 1 2 3 4 5]
Mean: 2.5
std: 1.707825127659933
variance: 2.9166666666666665


Create a 3Ã—6 numpy array of boolean 'True' values, then transpose it (aim for terse code)

Compute cross-correlation (covariance) of two given arrays (use np.cov)
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
np.cov(x, y))


Use np.bincount to count the number of occurrences of each value in a given array of integers
array1 = [0, 1, 6, 1, 4, 1, 2, 2, 7] 
np.bincount(array1)


Compute and display the histogram of numbers against a set of 'bins' (explore with more complex data)
import matplotlib.pyplot as plt
nums = np.array([0.5, 0.7, 1.0, 1.2, 1.3, 2.1])
bins = np.array([0, 1, 2, 3])
plt.hist(nums, bins=bins)
plt.show()


Create an array of the integers 1 to 1000
Populate another array from the even numbers in that array
Populate another array with just the primes from 1 to 1000 
(see https://rebrained.com/?p=458 for tips on finding primes in Python)
Time this operation using ever larger sets of data 
(e.g. 1 to 1000000, which took 1.76 sec on my machine)


Make an array that contains the positions where elements of a and b match
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])


Optional
--------
Use zip to combine all the following Irish places with their country or origin (that is, ie)
Use numpy to make an array of the results
["Dublin","Cork","Limerick","Galway","Waterford","Drogheda","Kilkenny","Wexford","Sligo","Clonmel","Dundalk","Bray","Ennis","Tralee","Carlow","Naas","Athlone","Letterkenny","Tullamore","Killarney","Arklow","Cobh","Castlebar","Midleton","Mallow","Ballina","Enniscorthy","Wicklow","Cavan","Athenry","Longford","Dungarvan","Nenagh","Trim","Thurles","Youghal","Monaghan","Buncrana","Ballinasloe","Fermoy","Westport","Carrick-on-Suir","Birr","Tipperary","Carrickmacross","Kinsale","Listowel","Clonakilty","Cashel","Macroom","Castleblayney","Kilrush","Skibbereen","Bundoran","Templemore","Clones","Newbridge","Mullingar","Balbriggan","Greystones","Leixlip","Tramore","Shannon","Gorey","Tuam","Edenderry","Bandon","Loughrea","Ardee","Mountmellick","Bantry","Boyle","Ballyshannon","Cootehill","Ballybay","Belturbet","Lismore","Kilkee","Granard"]
Finish by finding the weather for each place and storing the results in a DataFrame

